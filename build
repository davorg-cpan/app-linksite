#!/usr/bin/perl

use strict;
use warnings;
use feature qw[say signatures];
no warnings 'experimental::signatures';

use Template;
use JSON;
use Path::Tiny;
use File::Find;
use File::Basename;

my $json = path('links.json')->slurp;
my $data = JSON->new->decode($json);

my $tt = Template->new({
  INCLUDE_PATH => './src',
  OUTPUT_PATH  => './docs',
  VARIABLES => {
    mk_social_icon => \&mk_social_icon,
    mk_link => \&mk_link,
  },
});

my $urls = {
  facebook   => {
    url  => "https://facebook.com/",
    name => 'Facebook',
  },
  twitter    => {
    url  => "https://twitter.com/",
    name => 'Twitter',
  },
  instagram  => {
    url  => "https://instagram.com/",
    name => 'Instagram',
  },
  tiktok     => {
    url  => "https://tiktok.com/@",
    name => 'TikTok',
  },
  linkedin   => {
    url  => "https://linkedin.com/in/",
    name => 'LinkedIn',
  },
  substack   => {
    url  => "https://XXXX.substack.com/",
    name => 'Substack',
  },
  github     => {
    url  => "https://github.com/",
    name => 'GitHub',
  },
  medium     => {
    url  => "https://XXXX.medium.com/",
    name => 'Medium',
  },
  reddit     => {
    url  => "https://reddit.com/user/",
    name => 'Reddit',
  },
  quora      => {
    url  => "https://quora.com/profile/",
    name => 'Quora',
  },
  mastodon   => {
    # Hmm...
    url  => "https://fosstodon.org/@",
    name => 'Mastodon',
  },
  threads    => {
    url  => "https://www.threads.net/@",
    name => 'Threads',
  },
  bluesky   => {
    url  => 'https://bsky.app/profile/',
    name => 'Bluesky',
  },
};

find( \&do_this, 'src');

sub do_this {
  if (/\.tt$/) {
    say "Process $_ to ", basename $_, '.tt';
  } else {
    if (-d) {
      say "Make directory $File::Find::name";
    } elsif (-f) {
      say "Copy $File::Find::name";
    } else {
      say "Confused by $File::Find::name";
    }
  }
}

$tt->process('index.html.tt', $data, 'index.html')
  or die $tt->error;

sub mk_social_link ($social, $default_handle) {
  my $handle = $social->{handle} // $default_handle;

  my $url;

  if (exists $urls->{$social->{service}}) {
    $url = $urls->{$social->{service}}{url};
  } else {
    warn('Unknown social service: ', $social->{service});
    return;
  }

  if ($url =~ /XXXX/) {
    $url =~ s/XXXX/$handle/g;
  } else {
    $url .= $handle;
  }

  return $url;
}

sub mk_social_icon ($social, $default_handle) {
  my $link = mk_social_link($social, $default_handle);

  return qq[<a title='$urls->{$social->{service}}{name}' href='$link'><i class='fa-brands fa-3x fa-$social->{service}'></i></a>];
}

sub mk_link ($link) {
  return qq[<li class='list-group-item list-group-item-action'><a href="$link->{link}">$link->{title}</a></li>];
}
