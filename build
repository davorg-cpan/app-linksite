#!/usr/bni/perl

use strict;
use warnings;
use feature qw[say signatures];
no warnings 'experimental::signatures';

use Template;
use JSON;
use Path::Tiny;

my $json = path('links.json')->slurp;
my $data = JSON->new->decode($json);

my $tt = Template->new({
  INCLUDE_PATH => './src',
  OUTPUT_PATH  => './docs',
  VARIABLES => {
    social_icon => \&social_icon,
    mk_link => \&mk_link,
  },
});

$tt->process('index.html.tt', $data, 'index.html')
  or die $tt->error;

sub mk_social_link ($social, $default_handle) {
  my $urls = {
    facebook   => "https://facebook.com/",
    twitter    => "https://twitter.com/",
    instagram  => "https://instagram.com/",
    tiktok     => "https://tiktok.com/@",
    linkedin   => "https://linkedin.com/in/",
    substack   => "https://XXXX.substack.com/",
    github     => "https://github.com/",
    medium     => "https://XXXX.medium.com/"
  };

  my $handle = $social->{handle} // $default_handle;

  my $url;

  if (exists $urls->{$social->{service}}) {
    $url = $urls->{$social->{service}};
  } else {
    warn('Unknown social service: ', $social->{service});
    return;
  }

  if ($url =~ /XXXX/) {
    $url =~ s/XXXX/$handle/g;
  } else {
    $url .= $handle;
  }

  return $url;
}

sub social_icon ($social, $default_handle) {
  my $link = mk_social_link($social, $default_handle);

  return qq[<a href='$link'><i class='fa-brands fa-3x fa-$social->{service}'></i></a>];
}

sub mk_link ($link) {
  return qq[<li class='list-group-item list-group-item-action'><a href="$link->{link}">$link->{title}</a></li>];
}